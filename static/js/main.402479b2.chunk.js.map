{"version":3,"sources":["components/TodoList/TodoList.jsx","components/Api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","select","handleChange","e","target","name","value","setState","this","props","todos","filter","todo","toLowerCase","includes","completed","selectUser","result","filterTodos","className","type","placeholder","onChange","map","key","id","readOnly","onClick","userId","React","Component","request","url","fetch","then","res","json","data","getUserById","CurrentUser","user","userFromServer","a","prevProps","clearInfo","email","phone","App","selectedUserId","setSelectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.402479b2.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    select: 'All',\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterTodos() {\n    const { title, select } = this.state;\n    const { todos } = this.props;\n\n    return todos.filter(todo => (\n      todo.title && todo.title.toLowerCase().includes(title.toLowerCase())\n    )).filter((todo) => {\n      if (select !== 'All') {\n        return select === 'Completed' ? todo.completed : !todo.completed;\n      }\n\n      return todo;\n    });\n  }\n\n  render() {\n    const { selectUser } = this.props;\n    const { select } = this.state;\n\n    const result = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Searc\"\n            value={this.state.title}\n            onChange={this.handleChange}\n          />\n          <select\n            name=\"select\"\n            value={select}\n            onChange={e => this.handleChange(e)}\n          >\n            <option>All</option>\n            <option>Active</option>\n            <option>Completed</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n\n          <ul className=\"TodoList__list\">\n            {result.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  `TodoList__item\n                   TodoList__item--${!todo.completed ? 'unchecked' : 'checked'}`\n                }\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nconst request = url => (\n  fetch(`${API_URL}${url}`)\n    .then(res => res.json())\n    .then(res => res.data)\n);\n\nexport const getTodos = () => request('/todos');\nexport const getUserById = id => request(`/users/${id}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../Api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.userFromServer();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.userFromServer();\n    }\n  }\n\n  userFromServer = async() => {\n    const user = await getUserById(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearInfo } = this.props;\n\n    return (\n      <>\n        {user && (\n        <div className=\"CurrentUser\">\n\n          <h2\n            className=\"CurrentUser__title\"\n          >\n            <span>\n              Selected user: $\n              {user.id}\n            </span>\n          </h2>\n\n          <h3\n            className=\"CurrentUser__name\"\n          >\n            {user.name}\n          </h3>\n          <p\n            className=\"CurrentUser__email\"\n          >\n            {user.email}\n          </p>\n          <p\n            className=\"CurrentUser__phone\"\n          >\n            {user.phone}\n          </p>\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={clearInfo}\n          >\n            Clear\n          </button>\n        </div>\n        )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearInfo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/Api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  setSelectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n\n          <TodoList\n            todos={todos}\n            selectUser={this.setSelectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearInfo={this.clearInfo}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}